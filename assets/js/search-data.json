{
  
    
        "post0": {
            "title": "Getting started with satellite image classification",
            "content": "Introduction . On Twitter &amp; LinkedIn I regularly post on the topic of deep learning applied to satellite &amp; aerial imagery, and I receive many messages from people who want to get hands on with this topic but are unsure of how to get started. I maintain a popular repository on Github called the satellite-image-deep-learning which lists many useful references, ranging from very introductory articles on Medium to code for cutting edge techniques published in the academic literature. This has become a very long list of references which is not necessarily approachable to people getting started in this area. Therefore in order to assist these people I am going to publish a series of ‚ÄòGetting started with ..‚Äô blog posts, addressing the techniques listed in my repo in approximately the order they are listed in there. To begin this series this post is on the classification of imagery, which whilst a conceptually simple technique, actually has many practical applications. Lets get started . ##¬†What is image classification? You will probably already be familiar with image classification from the numerous cats vs dogs image classification tutorials on the internet. Image classification is therefore the task of assigning a label to an image, or even assigning multiple labels to an image1. When applied to satellite imagery, single label classification may be used to: . label the dominant subject of image, e.g. golf course, harbour | perform binary detection of some subject, e.g. ship present or not | . A benchmark dataset used in image classification is the UC merced dataset, a sample of which is shown below: . . Footnotes . When there are more than one label to be associated with an image the task is usually referred to as ‚Äòmulti-class‚Äô or ‚Äòmulti-label‚Äô classification. This more complex task is beyond the scope of this post but I aim to revisit in a later post¬†&#8617; . |",
            "url": "https://robmarkcole.com/markdown/2022/09/24/satellite-image-classification.html",
            "relUrl": "/markdown/2022/09/24/satellite-image-classification.html",
            "date": " ‚Ä¢ Sep 24, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Transformers in remote sensing",
            "content": "Introduction . Whenever I hear Transformers the first image that flashes through my mind is that of the cartoon characters I remember from my childhood in the 1980‚Äôs. And whilst that was a great TV series, the Transformers I wish to talk about are those making waves in the deep learning community. So first things first, what is a Transformer? The Transformer is a neural network architecture first published in a 2017 paper titled Attention Is All You Need by researchers at Google. Transformers learn context by tracking relationships in sequential data using a technique called attention. Transformers are replacing CNN‚Äôs and RNN‚Äôs in many applications and have come to dominate the field of natural language processing1 in only a few years. . Transformers were successfully applied to imagery in the 2020 paper An Image is Worth 16x16 Words: Transformers for Image Recognition at Scale, again by researchers at Google. Transformers applied to vision are commonly referred to as Vision Transformers, or ViT. I will not go into technical details here since those are covered in the paper and elsewhere, but the first figure from the paper is worth reproducing: . . We can see that there are absolutely no convolutional layers, and the authors note that the ViT has much less image-specific inductive bias2 than CNNs. The authors suggest this is why ViT require larger data volumes to achieve comparable levels of performance to CNN‚Äôs. They find that a ViT trained from scratch on ImageNet (1M images) under-performs a CNN. However on training with a significantly larger data volume (300M images), the ViT outperforms the CNN owing to its ability to capture greater context. Note that in practice it is typical to fine tune a ViT that has been pre-trained, just as we usually do with a CNN. . Transformers in remote sensing . Recently I have noticed greater numbers of remote sensing publications using Transformers/ViT. I became curious about the level of interest in Transformers in the remote sensing community and a Tweet about this got some interesting responses: . What questions do people have about Transformers and their use in remote sensing? This is the topic of my next blog post üôá‚Äç‚ôÇÔ∏èüöÄ . &mdash; Robin Cole (@robmarkcole) August 2, 2022 To paraphrase the main questions asked: . Do Transformers have the best performance? | Do they require more training data? | Are they harder to train? | Can they be used for classification/segmentation/object detection? | . I have subsequently come to appreciate there are not definitive answers to these questions, and issues such as performance/dataset size/training complexity are all coupled. Nevertheless I attempt to answer each of these in turn below. . Performance . To begin addressing these questions I will first reference the 2022 paper Current Trends in Deep Learning for Earth Observation: An Open-source Benchmark Arena for Image Classification. This paper compares the performance of vision Transformers (ViT) with eight other neural network architectures on the task of classification. Figure 1 from that paper is shown below: . . This paper provides a useful overview of multiple classification datasets, shown in (a) above. The datasets range considerably in number of images and classes. Model performance is compared on (b) multi-label and (c) multi-class classification tasks3. The darker shaded bars are performance when a model is trained from scratch, and the lighter shading bars are performance when the model is pre-trained on the ImageNet-1K dataset. We immediately observe that pre-training almost always improves model performance, which is a very useful takeaway. Amongst the models, ViT and DenseNet are the best performers, although ViT actually performs worst on the largest dataset, BigEarthNet. It is also interesting that for many of the datasets, a ResNet achieves comparable performance. . Training data requirements . I think it is a fair assumption that the vast majority of remote sensing users will be using pre-trained models4, so I will not discuss any further the requirements for training a ViT from scratch. Referring back to Figure 1, it is clear there is not a simple rule of thumb that large data volumes will guarantee better performance with a ViT. A much more likely scenario in practice is that a user has a relatively limited training dataset, and has already trained a CNN and wants to know if it is worth training a ViT. I have actually been unable to find a definitive paper focussing on this scenario, so if you find one please mention in the comments section. There are papers that propose innovations to reduce the training dataset size requirements, for example using self-supervision. . Training difficulty . If we again consider only fine tuning, is training a ViT more difficult than a CNN? To gain first hand experience I worked through the tutorial Fine-Tune ViT for Image Classification with Huggingface Transformers which I then modified to use the Eurosat remote sensing dataset. Training can be completed on a free Google Colab instance and yields a model with high classification accuracy on this admittedly very simple dataset. The experience of fine tuning a ViT appears to be similar to fine tuning a CNN, but if you have more experience of training ViT‚Äôs please let me know in the comments. . Use cases . Vision Transformers clearly excel at classification tasks, but what about other use cases? The references listed below show that Transformers have been applied to a wide range of tasks including segmentation, object detection, change detection and others: . UNetFormer: A UNet-like transformer for efficient semantic segmentation of remote sensing urban scene imagery | Self-supervised Vision Transformers for Land-cover Segmentation and Classification | Using Vision Transformers for enhanced wildfire detection in satellite images | Building Extraction from Remote Sensing Images with Sparse Token Transformers | Remote Sensing Image Change Detection with Transformers | Swin-Transformer-Enabled YOLOv5 with Attention Mechanism for Small Object Detection on Satellite Images | Transformer with Transfer CNN for Remote-Sensing-Image Object Detection | Point Transformer for Shape Classification and Retrieval of Urban Roof Point Clouds | Multimodal Fusion Transformer for Remote Sensing Image Classification | . Summary . Transformers have achieved state of the art performance on remote sensing classification datasets and look set to make an impact on other common tasks such as segmentation and object detection. I expect that CNN based networks will continue to be the workhorses of remote sensing applications owing to their proven track record and vast documentation. However given the rapid pace of innovation in the deep learning domain I would not be surprised to see Transformers or hybrid Transformer/CNN approaches steadily making their way into applications. . Further reading . Original Google blog post on transformers | Pytorch implementation of a ViT: vit-pytorch | ArXiv paper: Formal Algorithms for Transformers | Effect of Attention Mechanism in Deep Learning-Based Remote Sensing Image Processing: A Systematic Literature Review | . Terminology . CNN: convolutional neural network | RNN: recurrent neural network | ViT: vision transformer | . Footnotes . https://blogs.nvidia.com/blog/2022/03/25/what-is-a-transformer-model/¬†&#8617; . | image-specific inductive bias: in CNN‚Äôs the use of kernels bakes in the notion that image pixels are locally correlated and their correlation maps are translation-invariant, whilst a ViT must learn this, ref¬†&#8617; . | Note that multi-class reports accuracy on the target class, whilst multi-label reports the mean average precision (mAP) across labels on the image¬†&#8617; . | For further reading on pre-training see An Empirical Study of Remote Sensing Pretraining¬†&#8617; . |",
            "url": "https://robmarkcole.com/markdown/2022/08/15/transformers.html",
            "relUrl": "/markdown/2022/08/15/transformers.html",
            "date": " ‚Ä¢ Aug 15, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Quick tour of the WorldStrat Dataset",
            "content": "Introduction . A new dataset called the WorldStrat dataset was recently announced on Twitter by Julien Cornebise, Ivan Orsolic, and Freddie Kalaitzis. The dataset raises the bar in documentation quality of a dataset and the release includes a paper on arXiv1, code on Github2, and the dataset itself on both Zenodo3 and Kaggle4. . Proud to release the WorldStrat dataset with @ivanorsolic @alkalait and @esa Œ¶-lab:- ~10,000 km¬≤ of high-res SPOT satellite imagery- Multi-temporal matched low-res Sentinel2 images- Stratified wrt global land-uses- Enriched with sites under-represented in MLüßµ1/9 pic.twitter.com/kR0AnzIlkg . &mdash; Julien Cornebise (@JCornebise) July 19, 2022 This dataset is significant for a number of reasons: . Greater than 100 GB of imagery with global coverage | Covers locations typically under-represented in ML datasets | Colocated low and high resolution imagery | Code provided to extend the dataset &amp; integrate with the EO-Learn5 Python package | Models &amp; tutorials provided | Demonstrates super resolving Sentinel 2 imagery | The code, the Sentinel 2 images, the locations, the methodology, and the pre-trained models are all licensed for commercial use (SPOT imagery is NOT) | . The dataset comprises Sentinel 2 time-series &amp; colocated high resoluton Airbus SPOT imagery providing 10 &amp; 1.5 m/pixel respectively. An example is shown below: . . Getting started . I followed the instructions in the repository readme and downloaded the smaller dataset from Kaggle via the web UI. The zipped Kaggle dataset is 53GB, and even on a fast internet connection the download took 3-4 hours6. I began by running the Dataset Exploration.ipynb notebook, which gives an introduction to the dataset. Interestingly the imagery locations were suggested by several organisations: . 22 √ó 22.5km¬≤ images of Amnesty provided locations or 198 √ó 2.5km¬≤ images. | 39 √ó 22.5km¬≤ images of ASMSpotter provided locations or 351 √ó 2.5km¬≤ images. | 981 √ó 2.5km¬≤ images of UNHCR provided locations. | 2,407 √ó 2.5km¬≤ images of stratified-sampled locations to ensure coverage of all types of land-use and human density | . Several maps are generated using folium which show the capture location of the images. The image metadata is visualised in a pandas dataframe, and includes lat/lon, the source (e.g. Amnesty, UNHCR etc.) and a description field. Some very interesting locations are included, such as Camp 25, North Korea- Gulag, USA - migrant camps on border and Brazil-Jaci_Deforestation_Cattle. Given the provided metadata you could at this point start curating the dataset, say if you were interested in generating a version of the dataset focussed on a particular geography. . . Extending the dataset . The notebook Dataset Generation.ipynb shows how the dataset was created, and is the starting point if you want to extend the dataset yourself. To do this you can either supply a table of specific points to sample (as a csv or geojson) or you can uniformly sample the planet. There is an interesting dicussion on the challenges of random sampling and a mitigating strategy is provided. To discover available imagery you will need a SentinelHub account, and you can get a free 30-day trial account here. Clearly it might take some searching and good luck to locate imagery from the two satellites, over your area of interest, and within a short time window. Fortunately code is provided to assist with searching &amp; filtering the imagery. Note that only Sentinel 2 imagery can be downloaded for free, and SPOT imagery must be purchased from Airbus. Fortunately the purchase can be performed through SentinelHub and looks pretty straightforward. Code is also provided for downloading your ordered imagery, so the whole process from discovery to ingestion of data is very well documented. . Super resolution . One of the stated aims of releasing this dataset was to enable the training of super resolution models. The hope is that by super resolving free Sentinel imagery, users without the budget for purchasing high resolution imagery (e.g. SPOT) can use super resolved &amp; free Sentinel imagery in their applications. Training super resolution models generally requires colocated low and high resolution imagery, and to this end the WorldStrat dataset provides both low and high resolution imagery. Multiple low resolution frames from Sentinel 2 are provided for each location, enabling the training of multi-image super resolution models, as well as the more typical single-image super resolution models. The Github code includes a script for training super resolution models and an example output is shown below: . . The notebook Training.ipynb demonstrates how to run the training script. Whilst in general training is performed on a Linux machine, the authors have very helpfully included arguments if you wanted to perform training on a Windows machine. The code itself is written in python and uses pytorch and pytorch-lightning for the model and training loop. The code also includes logging of training metrics to Weights &amp; Biases. The models themselves are relatively lightweight and it is suggested that training the multi-image super resolution model will take 45 min - 1.5 hr on a single GPU instance. This should be within the limitations of a Kaggle GPU instance, so if you are interested in training the model yourself I would recommend beginning there. Note that a pretrained model is supplied in the Github repository and its use is shown in the Inference.ipynb notebook. If you want to read more about super resolution read section 4.1 of the ArXiv paper and see the links in my satellite-image-deep-learning Github repository here. . Other uses for the dataset . The availability of high resolution imagery is of significant interest in itself, since this is typically very expensive to acquire. This dataset covers locations typically under-represented in high resolution datasets and so will be of significant interest to those who study those locations. All images in this dataset are provided without annotation, so their use in applications such as segmentation or object detection would first require annotation to be performed. However in the ArXiv paper they note: ‚ÄòBecause every image is geo-referenced and timestamped, it is also possible to cross-reference it with any other source of label, for example mapping databases like OpenStreetMap, for building imprints, structure detection, etc‚Äô. Nevertheless there are a number of unsupervised or self-supervised techniques which do not required annotated data. In particular self supervised change detection is a technique that can be performed on the Sentinel 2 time series imagery, and where having the high resolution reference could aid with evaluation of predictions. A good introductory read on this topic is the paper Self-supervised Remote Sensing Images Change Detection at Pixel-level . Datasheet . The appendix of the ArXiv paper includes a Datasheet for the dataset which describes the motivation, composition, collection process &amp; recommended uses for the dataset following a methodology presented in the paper Datasheets for Datasets7. The purpose of including this datasheet is to improve &amp; standardise the quality of the documentation, in order to enable the use of the dataset with confidence and provide transparency and accountability around the production of the dataset itself. I think this is a very welcome inclusion and I hope to see more datasets published with an accompanying Datasheet. . Summary . Overall I am very impressed by both the size and global nature of the dataset, and the high quality of the documentation and code. Datasets often focus on a particular part of the world (USA mostly) and are often released without clear documentation on how they were produced, making them hard to extend or use with confidence. Therefore WorldStrat demonstrates best practice for publishing a dataset which I hope other publishers will emulate. Sentinel 2 imagery is widely used and so enhancement of its qualities through applications such as super resolution could have significant positive impact on end users. Finally I would like to thank Julien Cornebise for his feedback on the draft of this post. . Footnotes . https://arxiv.org/abs/2207.06418¬†&#8617; . | https://github.com/worldstrat/worldstrat¬†&#8617; . | https://zenodo.org/record/6810792#.YtjNb-zMK3I¬†&#8617; . | https://www.kaggle.com/datasets/jucor1/worldstrat¬†&#8617; . | https://eo-learn.readthedocs.io/en/latest/index.html¬†&#8617; . | Alternatively I could have just created a notebook on Kaggle itself, and would not have needed to wait for a download¬†&#8617; . | https://arxiv.org/abs/1803.09010¬†&#8617; . |",
            "url": "https://robmarkcole.com/markdown/2022/08/01/worldstrat.html",
            "relUrl": "/markdown/2022/08/01/worldstrat.html",
            "date": " ‚Ä¢ Aug 1, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Dissecting the satellite-image-deep-learning repo",
            "content": "Introduction . I maintain a popular repository on Github called the satellite-image-deep-learning1, currently sitting close to 4k stars. The repository lists useful references I have found related to satellite imagery and deep learning, but also goes beyond this to include sections on deploying machine learning models, and even a section on ‚Äòmovers and shakers‚Äô on Github. This post provides the brief history of this repository, how I find material, and why you should create something similar. A screenshot of the repository is shown below: . . History . So when and why did I start this repository? Looking at the code-frequency chart I see I started this repository sometime in April 2018, whilst I was working at Surrey Satellites2. The satellite constellation I had been hired to work on as an optical systems engineer/project manager, was on hold as it did not secure the required investment. I had demonstrated my ability to program in Python and was reassigned to assist with some development work. In particular the company had developed a basic catalogue for viewing satellite imagery &amp; capture locations on a map, built using a single index.html file containing some clever Javascript, and some python scripts that processed imagery metadata into a geojson file and generated thumbnails. I was asked to add some new features after the original developer left for a role at Descartes Labs. Most of the features were quite easily implemented, such as adding new sources of archive imagery (from a pile of CD roms) and tweaking the UI by editing some Javascript. The catalogue quickly grew, and improving the search functionality became a high priority. One particular feature request was to add tags to imagery, so a user could search using terms such as golf course or harbour. Now with well geo-referenced imagery the tagging could be performed using some kind of geo-spatial lookup, but the challenge was that much of the imagery lacked precise geo-location. What options are there for tagging an aerial image like this? . . Naturally machine learning was suggested, and I was given two days to do a POC3. The time-frame was very limited so I knew I would need to hit the ground running. I was aware of convolutional neural networks and their use for classification/tagging images and began searching online for relevant articles with published code, specifically applied to satellite imagery. From memory, I recall finding many academic papers, but very few were accompanied with published code. Also for those that were published with code, the code quality could vary significantly. At this point I started making a list of good resources using Markdown4 in a simple README5 and (with permission) put this on Github. Creating a list in markdown is very straight-forward, and the basic syntax is shown below: . * [title](url) -&gt; some description . Over time I have added more structure to the README, and added a Github action to check the validity of links, but otherwise the approach remains as simple as when I first conceived it. After leaving Surrey Satellites I moved on to other projects on Github (mostly adding extensions and integrations to Home-Assistant6) but was surprised to see after a couple of years that satellite-image-deep-learning had become my most popular Github repository by star count. In Jan 2021 I joined Satellite Vu7 and naturally my interest in satellite imagery took center stage once more. At this point I decided to put most of my open source energy into this repository, and it has grown from strength to strength from this point onwards. . Finding material . Many people have asked me how I find the material listed on satellite-image-deep-learning, and the answer is that for the most part it is found for me! Specifically, it is recommended in my Github feed as I have followed the right core group of developers &amp; academics who are responsible for much of the most high profile works listed on the repository. These people also star and fork other work which is then highlighted in my feed. Since I am interested in work with published code, Github is naturally the best place to find material (honestly if it is on Gitlab I probably won‚Äôt find it), but LinkedIn and Twitter are also excellent places to chance upon material. Beside these locations I also periodically check in on the Computer Vision and Pattern Recognition section of ArXiv8, and most days view the Remote Sensing journal9, screenshot below: . . Why you should create something similar . You might be wondering why I made the effort to create this repository, and what benefits it brings? Undeniably it is satisfying to have a popular repository on Github. It doesn‚Äôt really matter to me that my most popular repository on Github doesn‚Äôt contain a single line of code: it is obviously useful to at least a fraction of those that have starred it, and I feel like I have ‚Äògiven back‚Äô something to the open source community to which I owe my career. I can also list several more tangible benefits: . Kudos in the interview &amp; hiring process | Opens doors with other experienced developers &amp; researchers on Github | Receive approaches about interesting jobs &amp; consulting opportunities | Open source profile grants access to Github CoPilot10 | Receive nice messages from people this repository has helped in their research | Provides material to share on LinkedIn/Twitter to grow your professional network | . At this point I hope I have convinced you that the barrier to entry for creating a repository like satellite-image-deep-learning is really very low. Everyone has some domain knowledge and unique areas of interest which could provide the source of inspiration for a repository like this. I actually know people who have created similar pieces of work but never shared it online since ‚Äònobody else would be interested‚Äô. I encourage you to give it a try, as you never know where it may take you. . . Footnotes . https://github.com/robmarkcole/satellite-image-deep-learning¬†&#8617; . | https://www.sstl.co.uk/¬†&#8617; . | Proof of concept¬†&#8617; . | https://en.wikipedia.org/wiki/Markdown¬†&#8617; . | https://en.wikipedia.org/wiki/README¬†&#8617; . | https://www.home-assistant.io/¬†&#8617; . | https://www.satellitevu.com/¬†&#8617; . | https://arxiv.org/list/cs.CV/recent¬†&#8617; . | https://www.mdpi.com/journal/remotesensing¬†&#8617; . | https://github.com/features/copilot¬†&#8617; . |",
            "url": "https://robmarkcole.com/markdown/2022/07/24/satellite-image-deep-learning.html",
            "relUrl": "/markdown/2022/07/24/satellite-image-deep-learning.html",
            "date": " ‚Ä¢ Jul 24, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.‚Ü© . 2. This is the other footnote. You can even have a link!‚Ü© .",
            "url": "https://robmarkcole.com/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " ‚Ä¢ Feb 20, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a ‚Äúlevel 1 heading‚Äù in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here‚Äôs a footnote 1. Here‚Äôs a horizontal rule: . . Lists . Here‚Äôs a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes ‚Ä¶and‚Ä¶ . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote.¬†&#8617; . |",
            "url": "https://robmarkcole.com/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " ‚Ä¢ Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": ". I hold a PhD in physics from the University of Cambridge and have worked in a number of research and development roles within industry. I currently work as a senior data scientist at Satellite Vu where I apply cutting edge deep learning techniques to remote sensing imagery. I have a decade of experience with the Python programming language and have expertise in cloud computing on AWS infrastructure. I am a passionate advocate for the open source software movement and make regular contributions on Github. I have presented at Python conferences and appeared on podcasts including the ZenML podcast. I am the maintainer of the satellite-image-deep-learning Github repository and curate the satellite-image-deep-learning group on LinkedIn .",
          "url": "https://robmarkcole.com/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ ‚Äúsitemap.xml‚Äù | absolute_url }} | .",
          "url": "https://robmarkcole.com/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}